{
  "address": "0x9AC6FAC3090A4325E61ffccd5593306A1f6B4d9c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "addressMapping",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "attestationMapping",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "claimsMapping",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32[]",
          "name": "missedAttestationValidatorColl",
          "type": "uint32[]"
        }
      ],
      "name": "epochEnd",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "genesisBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPendingValidatorColl",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRegisteredValidatorColl",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "identityMapping",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pendingValidatorColl",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "validatorReference",
          "type": "uint32"
        }
      ],
      "name": "register",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "registeredValidatorColl",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x053169e669c008037781d3f8ac99468e2c47fbf477a10850d68a61b41963e3d9",
  "receipt": {
    "to": null,
    "from": "0xF7a664917aAD176159E25ba4487b2EE0b031d671",
    "contractAddress": "0x9AC6FAC3090A4325E61ffccd5593306A1f6B4d9c",
    "transactionIndex": 3,
    "gasUsed": "764112",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1645cf112c8c5eacfb36671f2278a296b28ce735b4045b1445fc07206e12660a",
    "transactionHash": "0x053169e669c008037781d3f8ac99468e2c47fbf477a10850d68a61b41963e3d9",
    "logs": [],
    "blockNumber": 5471900,
    "cumulativeGasUsed": "875264",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF7a664917aAD176159E25ba4487b2EE0b031d671"
  ],
  "numDeployments": 4,
  "solcInputHash": "8a955d7e067a6bb5220f75eb5778d36e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"addressMapping\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"attestationMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"claimsMapping\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32[]\",\"name\":\"missedAttestationValidatorColl\",\"type\":\"uint32[]\"}],\"name\":\"epochEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genesisBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPendingValidatorColl\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRegisteredValidatorColl\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"identityMapping\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingValidatorColl\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"validatorReference\",\"type\":\"uint32\"}],\"name\":\"register\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"registeredValidatorColl\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"BuidlGuidl\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"register(uint32)\":{\"notice\":\"Function that allows a solo staker to register\"}},\"notice\":\"A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/YourContract.sol\":\"YourContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/YourContract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\n// Use openzeppelin to inherit battle-tested implementations (ERC20, ERC721, etc)\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * A smart contract that allows changing a state variable of the contract and tracking the changes\\n * It also allows the owner to withdraw the Ether in the contract\\n * @author BuidlGuidl\\n */\\ncontract YourContract {\\n\\t// State Variables\\n\\taddress public immutable owner;\\n\\tuint public genesisBlockNumber = 0; //the block number from which the last donation started\\n\\tuint32[] public pendingValidatorColl; //the validators to add on the next donation\\n\\tuint32[] public registeredValidatorColl; //used to iterate the mappings which have the validator key as id\\n\\tmapping(uint32 => uint) public claimsMapping; //validator id to claimable value\\n\\tmapping(uint32 => uint32) public attestationMapping; //validator id to qyt of missed attestation blocks\\n\\tmapping(uint32 => address) public addressMapping; //validator id to registered address\\n\\tmapping(address => uint32) public identityMapping; //validator owner to validator id\\n\\taddress private backEndWalletAddress = 0xa1E860D34A0D426f4159cB4221f9023d7341bEfB;\\n\\tuint32 qtyBlocksPerEpoch = 32; //using a variable for this is easier to test on hardhat (should be 32 in prod)\\n\\n\\t// Constructor: Called once on contract deployment\\n\\t// Check packages/hardhat/deploy/00_deploy_your_contract.ts\\n\\tconstructor(address _owner) {\\n\\t\\towner = _owner;\\n\\t}\\n\\n\\t// Modifier: used to define a set of rules that must be met before or after a function is executed\\n\\t// Check the withdraw() function\\n\\tmodifier isOwner() {\\n\\t\\t// msg.sender: predefined variable that represents address of the account that called the current function\\n\\t\\trequire(msg.sender == owner, \\\"Not the Owner\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction getPendingValidatorColl() public view returns (uint32[] memory) {\\n\\t\\treturn pendingValidatorColl;\\n\\t}\\n\\n\\tfunction getRegisteredValidatorColl() public view returns (uint32[] memory) {\\n\\t\\treturn registeredValidatorColl;\\n\\t}\\n\\n\\tfunction claim(uint value) public\\n\\t{\\n\\t\\trequire(value < claimsMapping[identityMapping[msg.sender]], \\\"amount to withdraw exceeds claimable amount\\\");\\n\\t\\tclaimsMapping[identityMapping[msg.sender]] -= value;\\n\\t\\t(bool sent, ) = msg.sender.call{value: value}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n\\t}\\n\\n\\tfunction epochEnd(uint32[] calldata missedAttestationValidatorColl) public\\n\\t{\\n\\t\\tfor(uint i = 0; i < missedAttestationValidatorColl.length; ++i)\\n\\t\\t{\\n\\t\\t\\tattestationMapping[missedAttestationValidatorColl[i]] += qtyBlocksPerEpoch;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * Function that allows a solo staker to register\\n\\t */\\n\\tfunction register(uint32 validatorReference) public\\n    {\\n        //Could not make it work\\n//\\t\\tbytes32  _hashMessage = getMessageHash(_message);\\n//\\t\\tbytes32 _ethHashMessage = getEthHashedMessage(_hashMessage);\\n//\\t\\taddress signer = recover(stringToBytes32(_message), signature);\\n//\\t\\tconsole.log(\\\"signer=\\\",signer);\\n//\\t\\tconsole.log(\\\"backEndWalletAddress=\\\",backEndWalletAddress);\\n//\\t\\trequire (signer == backEndWalletAddress, \\\"Signature is not valid\\\");\\n        claimsMapping[validatorReference] = 0;\\n        attestationMapping[validatorReference] = 0;\\n        identityMapping[msg.sender] = validatorReference;\\n\\t\\taddressMapping[validatorReference] = msg.sender;\\n        pendingValidatorColl.push(validatorReference);\\n\\t}\\n\\n\\t/**\\n\\t * Function that allows the contract to receive a donation of ETH\\n\\t */\\n\\treceive() external payable \\n\\t{\\n\\t\\tif(genesisBlockNumber != 0 && registeredValidatorColl.length > 0)\\n\\t\\t{\\n\\t\\t\\t//the transferred value for this transaction is already included in the contract balance\\n\\t\\t\\tuint valueToDistribute = address(this).balance;\\n\\t\\t\\tfor(uint i = 0; i < registeredValidatorColl.length; ++i)\\n\\t\\t\\t{\\n\\t\\t\\t\\tvalueToDistribute -= claimsMapping[registeredValidatorColl[i]];\\n\\t\\t\\t}\\n\\t\\t\\tuint qtyBlocksInPeriod = block.number - genesisBlockNumber;\\n\\t\\t\\tuint32 totalQtyMissedAttestations;\\n\\t\\t\\tfor(uint i = 0; i < registeredValidatorColl.length; ++i)\\n\\t\\t\\t{\\n\\t\\t\\t\\ttotalQtyMissedAttestations += attestationMapping[registeredValidatorColl[i]];\\n\\t\\t\\t}\\n\\t\\t\\tuint valuePerBlockAndValidator = valueToDistribute / ((qtyBlocksInPeriod * registeredValidatorColl.length) - totalQtyMissedAttestations);\\n\\t\\t\\tfor(uint i = 0; i < registeredValidatorColl.length; ++i)\\n\\t\\t\\t{\\n\\t\\t\\t\\tclaimsMapping[registeredValidatorColl[i]] += (qtyBlocksInPeriod - attestationMapping[registeredValidatorColl[i]]) * valuePerBlockAndValidator;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tgenesisBlockNumber = block.number;\\n\\t\\tif(pendingValidatorColl.length == 0)\\n\\t\\t{\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\t//add the pending validators and clear the list\\n\\t\\tfor (int i = int(pendingValidatorColl.length - 1); i >= 0; --i)\\n\\t\\t{\\n\\t\\t\\tregisteredValidatorColl.push(pendingValidatorColl[uint(i)]);\\n\\t\\t\\tpendingValidatorColl.pop();\\n        }\\n\\t}\\n\\n\\tfunction getMessageHash(string memory _msg) private pure returns (bytes32) {\\n\\t\\treturn keccak256(abi.encodePacked(_msg));\\n\\t}\\n\\n\\tfunction getEthHashedMessage(bytes32 _msg)\\n\\tprivate\\n\\tpure\\n\\treturns (bytes32)\\n\\t{\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\tabi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", _msg)\\n\\t\\t);\\n\\t}\\n\\n\\tfunction recover(bytes32 _ethHashMessage , bytes memory _sig) private pure returns(address){\\n\\t\\t(bytes32 r , bytes32 s , uint8 v) = _split(_sig);\\n\\t\\treturn ecrecover(_ethHashMessage, v, r, s);\\n\\t}\\n\\n\\tfunction _split(bytes memory _sig) private pure returns(bytes32 r ,bytes32 s , uint8 v) {\\n\\t\\trequire(_sig.length==65,\\\"Signature is not valid\\\");\\n\\t\\tassembly{\\n\\t\\t\\tr :=mload(add(_sig,32))\\n\\t\\t\\ts := mload(add(_sig,64))\\n\\t\\t\\tv :=byte(0,mload(add(_sig,96)))\\n\\t\\t}\\n\\t}\\n\\n\\tfunction stringToBytes32(string memory source) private pure returns (bytes32 result) {\\n\\t\\tbytes memory tempEmptyStringTest = bytes(source);\\n\\t\\tif (tempEmptyStringTest.length == 0) {\\n\\t\\t\\treturn 0x0;\\n\\t\\t}\\n\\n\\t\\tassembly {\\n\\t\\t// Load the first 32 bytes of the string and store it in result\\n\\t\\t\\tresult := mload(add(source, 32))\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xdba168d3f5d55e42a697128b7195bb2c6fda3df4e060650f6aa50b133c59add7\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405260008055600780546001600160c01b0319167420a1e860d34a0d426f4159cb4221f9023d7341befb17905534801561003b57600080fd5b50604051610d16380380610d1683398101604081905261005a9161006b565b6001600160a01b031660805261009b565b60006020828403121561007d57600080fd5b81516001600160a01b038116811461009457600080fd5b9392505050565b608051610c606100b660003960006105b30152610c606000f3fe6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063c35a315c11610059578063c35a315c14610640578063ead6051714610660578063f25935c114610696578063f6fd5de2146106c357600080fd5b80638da5cb5b146105a1578063903f47bd146105ed578063c2b790891461060d57600080fd5b80630356fe3a14610402578063086ed5211461042b578063130d79061461044d578063379607f5146105195780637708219b1461053957806379b0ec2a1461055957600080fd5b366103fd57600054158015906100dd575060025415155b15610313574760005b600254811015610165576003600060028381548110610107576101076109fb565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054826101539190610a27565b915061015e81610a40565b90506100e6565b50600080546101749043610a27565b90506000805b6002548110156101f057600460006002838154811061019b5761019b6109fb565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a90048216845283019390935260409091019020546101de911683610a59565b91506101e981610a40565b905061017a565b5060025460009063ffffffff8316906102099085610a7d565b6102139190610a27565b61021d9085610a94565b905060005b60025481101561030d57816004600060028481548110610244576102446109fb565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a9004821684528301939093526040909101902054610287911686610a27565b6102919190610a7d565b60036000600284815481106102a8576102a86109fb565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008282546102f79190610ab6565b90915550610306905081610a40565b9050610222565b50505050505b436000908155600154900361032457005b6001805460009161033491610a27565b90505b600081126103fb57600260018281548110610354576103546109fb565b60009182526020808320600880840490910154855460018181018855968652929094209082040180546007928316600490810261010090810a63ffffffff9590961691909102900a9094048216830292909102199092161790558054806103bd576103bd610ac9565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590556103f481610adf565b9050610337565b005b600080fd5b34801561040e57600080fd5b5061041860005481565b6040519081526020015b60405180910390f35b34801561043757600080fd5b506104406106d8565b6040516104229190610afc565b34801561045957600080fd5b506103fb610468366004610b46565b63ffffffff90811660008181526003602090815260408083208390556004808352818420805463ffffffff19908116909155338086526006855283862080549092168717909155858552600590935290832080546001600160a01b0319169092179091556001805480820182559252600882047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805460079093169091026101000a928302929093021916179055565b34801561052557600080fd5b506103fb610534366004610b73565b61075c565b34801561054557600080fd5b506103fb610554366004610b8c565b6108b0565b34801561056557600080fd5b5061058c610574366004610c01565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610422565b3480156105ad57600080fd5b506105d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610422565b3480156105f957600080fd5b5061058c610608366004610b73565b610954565b34801561061957600080fd5b5061058c610628366004610b46565b60046020526000908152604090205463ffffffff1681565b34801561064c57600080fd5b5061058c61065b366004610b73565b61098e565b34801561066c57600080fd5b506105d561067b366004610b46565b6005602052600090815260409020546001600160a01b031681565b3480156106a257600080fd5b506104186106b1366004610b46565b60036020526000908152604090205481565b3480156106cf57600080fd5b5061044061099e565b6060600180548060200260200160405190810160405280929190818152602001828054801561075257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116107155790505b5050505050905090565b3360009081526006602090815260408083205463ffffffff168352600390915290205481106107e65760405162461bcd60e51b815260206004820152602b60248201527f616d6f756e7420746f207769746864726177206578636565647320636c61696d60448201526a18589b1948185b5bdd5b9d60aa1b60648201526084015b60405180910390fd5b3360009081526006602090815260408083205463ffffffff168352600390915281208054839290610818908490610a27565b9091555050604051600090339083908381818185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b50509050806108ac5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016107dd565b5050565b60005b8181101561094f57600754600160a01b900463ffffffff16600460008585858181106108e1576108e16109fb565b90506020020160208101906108f69190610b46565b63ffffffff9081168252602082019290925260400160009081208054909261092091859116610a59565b92506101000a81548163ffffffff021916908363ffffffff1602179055508061094890610a40565b90506108b3565b505050565b6002818154811061096457600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6001818154811061096457600080fd5b60606002805480602002602001604051908101604052809291908181526020018280548015610752576000918252602091829020805463ffffffff1684529082028301929091600491018084116107155790505050505050905090565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610a3a57610a3a610a11565b92915050565b600060018201610a5257610a52610a11565b5060010190565b63ffffffff818116838216019080821115610a7657610a76610a11565b5092915050565b8082028115828204841417610a3a57610a3a610a11565b600082610ab157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a3a57610a3a610a11565b634e487b7160e01b600052603160045260246000fd5b6000600160ff1b8201610af457610af4610a11565b506000190190565b6020808252825182820181905260009190848201906040850190845b81811015610b3a57835163ffffffff1683529284019291840191600101610b18565b50909695505050505050565b600060208284031215610b5857600080fd5b813563ffffffff81168114610b6c57600080fd5b9392505050565b600060208284031215610b8557600080fd5b5035919050565b60008060208385031215610b9f57600080fd5b823567ffffffffffffffff80821115610bb757600080fd5b818501915085601f830112610bcb57600080fd5b813581811115610bda57600080fd5b8660208260051b8501011115610bef57600080fd5b60209290920196919550909350505050565b600060208284031215610c1357600080fd5b81356001600160a01b0381168114610b6c57600080fdfea264697066735822122043acc84a40477f780fc991081a2f49e8db6d5789a73bdb796020231be46356d564736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c80638da5cb5b1161007f578063c35a315c11610059578063c35a315c14610640578063ead6051714610660578063f25935c114610696578063f6fd5de2146106c357600080fd5b80638da5cb5b146105a1578063903f47bd146105ed578063c2b790891461060d57600080fd5b80630356fe3a14610402578063086ed5211461042b578063130d79061461044d578063379607f5146105195780637708219b1461053957806379b0ec2a1461055957600080fd5b366103fd57600054158015906100dd575060025415155b15610313574760005b600254811015610165576003600060028381548110610107576101076109fb565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002054826101539190610a27565b915061015e81610a40565b90506100e6565b50600080546101749043610a27565b90506000805b6002548110156101f057600460006002838154811061019b5761019b6109fb565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a90048216845283019390935260409091019020546101de911683610a59565b91506101e981610a40565b905061017a565b5060025460009063ffffffff8316906102099085610a7d565b6102139190610a27565b61021d9085610a94565b905060005b60025481101561030d57816004600060028481548110610244576102446109fb565b6000918252602080832060088304015463ffffffff60046007909416939093026101000a9004821684528301939093526040909101902054610287911686610a27565b6102919190610a7d565b60036000600284815481106102a8576102a86109fb565b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1663ffffffff1663ffffffff16815260200190815260200160002060008282546102f79190610ab6565b90915550610306905081610a40565b9050610222565b50505050505b436000908155600154900361032457005b6001805460009161033491610a27565b90505b600081126103fb57600260018281548110610354576103546109fb565b60009182526020808320600880840490910154855460018181018855968652929094209082040180546007928316600490810261010090810a63ffffffff9590961691909102900a9094048216830292909102199092161790558054806103bd576103bd610ac9565b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a021916905590556103f481610adf565b9050610337565b005b600080fd5b34801561040e57600080fd5b5061041860005481565b6040519081526020015b60405180910390f35b34801561043757600080fd5b506104406106d8565b6040516104229190610afc565b34801561045957600080fd5b506103fb610468366004610b46565b63ffffffff90811660008181526003602090815260408083208390556004808352818420805463ffffffff19908116909155338086526006855283862080549092168717909155858552600590935290832080546001600160a01b0319169092179091556001805480820182559252600882047fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf601805460079093169091026101000a928302929093021916179055565b34801561052557600080fd5b506103fb610534366004610b73565b61075c565b34801561054557600080fd5b506103fb610554366004610b8c565b6108b0565b34801561056557600080fd5b5061058c610574366004610c01565b60066020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610422565b3480156105ad57600080fd5b506105d57f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610422565b3480156105f957600080fd5b5061058c610608366004610b73565b610954565b34801561061957600080fd5b5061058c610628366004610b46565b60046020526000908152604090205463ffffffff1681565b34801561064c57600080fd5b5061058c61065b366004610b73565b61098e565b34801561066c57600080fd5b506105d561067b366004610b46565b6005602052600090815260409020546001600160a01b031681565b3480156106a257600080fd5b506104186106b1366004610b46565b60036020526000908152604090205481565b3480156106cf57600080fd5b5061044061099e565b6060600180548060200260200160405190810160405280929190818152602001828054801561075257602002820191906000526020600020906000905b82829054906101000a900463ffffffff1663ffffffff16815260200190600401906020826003010492830192600103820291508084116107155790505b5050505050905090565b3360009081526006602090815260408083205463ffffffff168352600390915290205481106107e65760405162461bcd60e51b815260206004820152602b60248201527f616d6f756e7420746f207769746864726177206578636565647320636c61696d60448201526a18589b1948185b5bdd5b9d60aa1b60648201526084015b60405180910390fd5b3360009081526006602090815260408083205463ffffffff168352600390915281208054839290610818908490610a27565b9091555050604051600090339083908381818185875af1925050503d806000811461085f576040519150601f19603f3d011682016040523d82523d6000602084013e610864565b606091505b50509050806108ac5760405162461bcd60e51b81526020600482015260146024820152732330b4b632b2103a379039b2b7321022ba3432b960611b60448201526064016107dd565b5050565b60005b8181101561094f57600754600160a01b900463ffffffff16600460008585858181106108e1576108e16109fb565b90506020020160208101906108f69190610b46565b63ffffffff9081168252602082019290925260400160009081208054909261092091859116610a59565b92506101000a81548163ffffffff021916908363ffffffff1602179055508061094890610a40565b90506108b3565b505050565b6002818154811061096457600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b6001818154811061096457600080fd5b60606002805480602002602001604051908101604052809291908181526020018280548015610752576000918252602091829020805463ffffffff1684529082028301929091600491018084116107155790505050505050905090565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b81810381811115610a3a57610a3a610a11565b92915050565b600060018201610a5257610a52610a11565b5060010190565b63ffffffff818116838216019080821115610a7657610a76610a11565b5092915050565b8082028115828204841417610a3a57610a3a610a11565b600082610ab157634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610a3a57610a3a610a11565b634e487b7160e01b600052603160045260246000fd5b6000600160ff1b8201610af457610af4610a11565b506000190190565b6020808252825182820181905260009190848201906040850190845b81811015610b3a57835163ffffffff1683529284019291840191600101610b18565b50909695505050505050565b600060208284031215610b5857600080fd5b813563ffffffff81168114610b6c57600080fd5b9392505050565b600060208284031215610b8557600080fd5b5035919050565b60008060208385031215610b9f57600080fd5b823567ffffffffffffffff80821115610bb757600080fd5b818501915085601f830112610bcb57600080fd5b813581811115610bda57600080fd5b8660208260051b8501011115610bef57600080fd5b60209290920196919550909350505050565b600060208284031215610c1357600080fd5b81356001600160a01b0381168114610b6c57600080fdfea264697066735822122043acc84a40477f780fc991081a2f49e8db6d5789a73bdb796020231be46356d564736f6c63430008110033",
  "devdoc": {
    "author": "BuidlGuidl",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "register(uint32)": {
        "notice": "Function that allows a solo staker to register"
      }
    },
    "notice": "A smart contract that allows changing a state variable of the contract and tracking the changes It also allows the owner to withdraw the Ether in the contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "genesisBlockNumber",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 10,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "pendingValidatorColl",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 13,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "registeredValidatorColl",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 17,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "claimsMapping",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint32,t_uint256)"
      },
      {
        "astId": 21,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "attestationMapping",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint32,t_uint32)"
      },
      {
        "astId": 25,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "addressMapping",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 29,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "identityMapping",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint32)"
      },
      {
        "astId": 32,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "backEndWalletAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 35,
        "contract": "contracts/YourContract.sol:YourContract",
        "label": "qtyBlocksPerEpoch",
        "offset": 20,
        "slot": "7",
        "type": "t_uint32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint32)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint32,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}